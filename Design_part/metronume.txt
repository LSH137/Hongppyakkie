Metronome 기능 디자인 + 소스코드 

사이트 주소: https://codepen.io/luxonauta/pen/PoNrgGW

HTML 
<main class="has-dflex-center">
  <section>
    <div class="lx-container-80">
      <div class="lx-row">
        <h1><i class="fas fa-music"></i> Metronome</h1>
        <div class="lx-card metronomy">
          <div class="lx-row">
            <div class="beats-indicator">--</div>
            <div class="beats">
              <span class="beat bs-sm"></span>
              <span class="beat bs-sm"></span>
              <span class="beat bs-sm"></span>
              <span class="beat bs-sm"></span>
              <span class="beat bs-sm"></span>
              <span class="beat bs-sm"></span>
            </div>
            <div class="range-slider">
              <a class="lx-btn has-dflex-center bdecrease"><i class="fas fa-minus-circle"></i></a>
              <input type="range" min="30" max="244" step="1" value="100" class="range purple" />
              <a class="lx-btn has-dflex-center bincrease"><i class="fas fa-plus-circle"></i></a>
            </div>
            <div class="bpms">100 BPM</div>
            <a class="lx-btn btoogle-metronome">Start</a>
            <div class="time-presets">
              <a class="lx-btn preset" data-set-time="1">3/4</a>
              <a class="lx-btn preset" data-set-time="2">4/4</a>
              <a class="lx-btn preset is-active" data-set-time="3">6/8</a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>
</main>

CSS

$pc: #22212c;
$sc: #2a2c37;
$tc: #9580ff;
$qc: #8aff80;
$r: #ff5555;
$w: #f8f8f2;

html,
body {
  font-family: "Roboto", sans-serif;
  color: $w;
  background-color: $pc;
}

main {
  width: 100%;
  min-height: 100vh;
  padding: 4rem 0;

  section {
    width: 100%;

    h1 {
      width: 100%;
      text-align: center;
      color: $tc;
    }

    .lx-card {
      width: 60%;
      background-color: $sc;

      .lx-btn {
        user-select: none;
      }

      .lx-row {
        flex-flow: wrap column;
        gap: 2rem;
      }

      .beats-indicator,
      .bpms {
        width: 100%;
        user-select: none;
        text-align: center;
        font-size: 2.5rem;
        font-weight: 600;
      }

      .beats-indicator {
        &.is-first-beat {
          color: $qc;
        }
      }

      .beats {
        width: 80%;
        display: flex;
        align-items: center;
        justify-content: space-evenly;

        .beat {
          width: 1.5rem;
          height: 1.5rem;
          border-radius: 50%;
          background-color: $pc;

          &.is-active {
            background-color: $qc;
          }

          &.is-muted {
            display: none;
            visibility: hidden;
          }
        }
      }

      .range-slider {
        width: 100%;
        display: flex;
        align-items: center;
        justify-content: space-between;

        .lx-btn {
          width: 3rem;
          height: 3rem;
          padding: 0.75rem;
          border-radius: 50%;
          font-size: 1.5rem;
          background-color: $pc;

          &:first-child {
            color: $tc;
          }

          &:last-child {
            color: $qc;
          }
        }

        input[type="range"].range {
          -webkit-appearance: none;
          -moz-appearance: none;
          width: 80%;
          background-color: transparent;

          &::-webkit-slider-runnable-track {
            -webkit-appearance: none;
            height: 1rem;
            display: flex;
            align-items: center;
            border-radius: 2.5rem;
            background: rgb(149, 128, 255);
            background: linear-gradient(
              45deg,
              $tc 0%,
              rgba(138, 255, 128, 1) 100%
            );
          }

          &::-moz-range-track {
            -moz-appearance: none;
            height: 1rem;
            display: flex;
            align-items: center;
            border-radius: 2.5rem;
            background: rgb(149, 128, 255);
            background: linear-gradient(
              45deg,
              rgba(149, 128, 255, 1) 0%,
              rgba(138, 255, 128, 1) 100%
            );
          }

          &::-webkit-slider-thumb {
            -webkit-appearance: none;
            width: 2.5rem;
            height: 2.5rem;
            border-radius: 50%;
            border: 0.125rem solid $tc;
            position: relative;
            cursor: grab;
            background-color: $sc;
            transition: border 1000ms ease;
          }

          &::-moz-range-thumb {
            -moz-appearance: none;
            width: 2.5rem;
            height: 2.5rem;
            border-radius: 50%;
            border: 0.125rem solid $tc;
            position: relative;
            cursor: grab;
            background-color: $sc;
            transition: border 1000ms ease;
          }

          &::-webkit-slider-thumb:active {
            cursor: grabbing;
          }

          &::-moz-range-thumb:active {
            cursor: grabbing;
          }

          &.green-thumb {
            &::-webkit-slider-thumb {
              border-color: $qc;
            }

            &::-moz-range-thumb {
              border-color: $qc;
            }
          }

          &:focus {
            outline: none;
          }
        }
      }

      .btoogle-metronome {
        text-transform: none;
        font-size: 1.5rem;
        font-weight: 600;
        color: $pc;
        background-color: $qc;
      }

      .time-presets {
        .preset {
          font-size: 1.15rem;
          font-weight: 600;
          color: $pc;
          background-color: $r;

          &.is-active {
            background-color: $tc;
          }
        }
      }
    }
  }
}

@media screen and (max-width: 56.25rem) {
  main {
    section {
      .lx-card {
        width: 100%;
      }
    }
  }
}

JS
let bpm = 100;
let beat = 0;
let timeSig = 6;
let metronomeState = false;
let interval;

document.addEventListener("DOMContentLoaded", (e) => {
  let beatsIndicator = document.querySelector(".beats-indicator");
  let beatsButtons = document.querySelectorAll(".beat");
  let inputRange = document.querySelector(".range");
  let bpms = document.querySelector(".bpms");
  let presetsButtons = document.querySelectorAll(".preset");
  let metronomeToggle = document.querySelector(".btoogle-metronome");

  inputRange.addEventListener("input", (e) => {
    stopMetronome(beatsIndicator, beatsButtons);
    updateBpms(bpms, inputRange);
    startMetronome(inputRange, beatsIndicator, beatsButtons);
    metronomeToggle.innerHTML = "Stop";
    inputRange.value > 137
      ? inputRange.classList.add("green-thumb")
      : inputRange.classList.remove("green-thumb");
  });

  document.querySelector(".bincrease").addEventListener("click", (e) => {
    inputRange.value++;
    updateBpms(bpms, inputRange);
  });

  document.querySelector(".bdecrease").addEventListener("click", (e) => {
    inputRange.value--;
    updateBpms(bpms, inputRange);
  });

  metronomeToggle.addEventListener("click", (e) => {
    if (metronomeState === false) {
      metronomeState = true;
      e.currentTarget.innerHTML = "Stop";
      startMetronome(inputRange, beatsIndicator, beatsButtons);
    } else {
      metronomeState = false;
      e.currentTarget.innerHTML = "Start";
      stopMetronome(beatsIndicator, beatsButtons);
    }
  });

  presetsButtons.forEach((btn) => {
    btn.addEventListener("click", (e) => {
      resetPresetsButtons(presetsButtons);
      btn.classList.add("is-active");
      setPreset(btn.dataset.setTime, beatsButtons);
      metronomeState = false;
      metronomeToggle.innerHTML = "Start";
      updateMetronome(beatsIndicator, beatsButtons);
      stopMetronome(beatsIndicator, beatsButtons);
    });
  });
});

function startMetronome(inputRange, beatsIndicator, beatsButtons) {
  interval = setInterval((e) => {
    beat++;
    if (beat > timeSig) {
      beat = 1;
    }
    updateMetronome(beatsIndicator, beatsButtons);
  }, 60000 / inputRange.value);
}

function stopMetronome(beatsIndicator, beatsButtons) {
  clearInterval(interval);
  beatsIndicator.innerHTML = "--";
  beat = 0;
  updateMetronome(beatsIndicator, beatsButtons);
}

function updateMetronome(beatsIndicator, beatsButtons) {
  if (metronomeState === true) {
    if (beat == 1) {
      resetBeatButtons(beatsButtons);
      beatsIndicator.classList.add("is-first-beat");
      beatsButtons[beat - 1].classList.add("is-active");
    } else if (beat == 2) {
      resetBeatsIndicator(beatsIndicator);
      resetBeatButtons(beatsButtons);
      beatsButtons[beat - 1].classList.add("is-active");
    } else if (beat == 3) {
      resetBeatsIndicator(beatsIndicator);
      resetBeatButtons(beatsButtons);
      beatsButtons[beat - 1].classList.add("is-active");
    } else if (beat == 4) {
      resetBeatsIndicator(beatsIndicator);
      resetBeatButtons(beatsButtons);
      beatsButtons[beat - 1].classList.add("is-active");
    } else if (beat == 5) {
      resetBeatsIndicator(beatsIndicator);
      resetBeatButtons(beatsButtons);
      beatsButtons[beat - 1].classList.add("is-active");
    } else if (beat == 6) {
      resetBeatsIndicator(beatsIndicator);
      resetBeatButtons(beatsButtons);
      beatsButtons[beat - 1].classList.add("is-active");
    }

    beatsIndicator.innerHTML = beat;
  } else {
    beatsIndicator.innerHTML = "--";
    resetBeatsIndicator(beatsIndicator);
    resetBeatButtons(beatsButtons);
    clearInterval(interval);
  }
}

function updateBpms(bpms, inputRange) {
  bpms.innerHTML = inputRange.value + " BPM";
}

function resetBeatsIndicator(beatsIndicator) {
  if (beatsIndicator.classList.contains("is-first-beat")) {
    beatsIndicator.classList.remove("is-first-beat");
  }
}

function resetBeatButtons(beatsButtons) {
  beatsButtons.forEach((btn) => {
    if (btn.classList.contains("is-active")) {
      btn.classList.remove("is-active");
    }
  });
}

function resetBeatsButtonsState(beatsButtons) {
  beatsButtons.forEach((btn) => {
    if (btn.classList.contains("is-muted")) {
      btn.classList.remove("is-muted");
    }
  });
}

function resetPresetsButtons(presetsButtons) {
  presetsButtons.forEach((btn) => {
    if (btn.classList.contains("is-active")) {
      btn.classList.remove("is-active");
    }
  });
}

function setPreset(preset, beatsButtons) {
  if (preset == 1) {
    resetBeatsButtonsState(beatsButtons);
    beatsButtons[3].classList.add("is-muted");
    beatsButtons[4].classList.add("is-muted");
    beatsButtons[5].classList.add("is-muted");
    timeSig = 3;
  } else if (preset == 2) {
    resetBeatsButtonsState(beatsButtons);
    beatsButtons[4].classList.add("is-muted");
    beatsButtons[5].classList.add("is-muted");
    timeSig = 4;
  } else if (preset == 3) {
    resetBeatsButtonsState(beatsButtons);
    timeSig = 6;
  } else {
    alert("Something is not right...");
  }
}
